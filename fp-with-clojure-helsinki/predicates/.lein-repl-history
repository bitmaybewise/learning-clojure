(#{1 2 3} 3)
({:nome "abc" :sob 123})
{:nome "abc" :sob 123}
(:nome {:nome "abc" :sob 123})
(:nome {:nome #{1 2 3}})
(:sob {:nome #{1 2 3}})
(= nil false)
(:sob {:nome #{1 2 3}})
(nil? (:sob {:nome #{1 2 3}}))
(nil? (:nome {:nome #{1 2 3}}))
((:nome nil) 2)
((:nome #{1 2}) 2)
((:nome {:nome #{1 2}) 2)
(:nome {:nome #{1 2}})
{:nome #{1 2}}
(:sob {:nome #{1 2}})
(:nome {:nome #{1 2}})
((:nome {:nome #{1 2}}) 2)
((:nome {:nome "abc"}) 2)
((:nome {}) 2)
(empty? [1 2])
(empty? [])
(empty? nil)
(source some)
(first [])
(first nil)
(first [[false] [1]])
(def par [2 4 6])
par
(def misc [2 4 5])
misc
(map even? par)
(def mappar (map even? par))
(def mapmisc (map even? misc))
mapmisc
(apply and mappar)
(apply = mappar)
(apply = mapmisc)
(def mapimpar (map even? [1 3 5]))
(apply = mapimpar)
(apply #(= true %) mapimpar)
(and true true true)
(and true true true false)
(and [true true true false])
(and '[true true true false])
(and `[true true true false])
(apply and [true true true false])
(doc and)
(source every?)
(use 'predicates :reload)
(prime? 2)
(prime? 4)
(prime? 5)
(defn pred [x y] (= 0 (mod x y)))
pred
(source pred)
(defn prime [n]
  (let [pred #(= 0 (mod n %))]
   (some pred (range 2 n))))
(prime 2)
(prime 3)
(prime 5)
(prime 4)
quit
