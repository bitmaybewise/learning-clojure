(source sum)
(doc sum)
quit
(doc next)
(and 1 [])
(and (nil? 1) [])
(and (not (nil? 1)) [])
(and (not (nil? 1)) (empty? []))
(and (not (nil? 1)) (empty? [1 2]))
(use 'recursion :reload)
(singleton? [])
(singleton? '())
(singleton? {})
(singleton? #{})
(singleton? #{1})
(singleton? #{1 2})
(singleton? {1 2})
(singleton? {1 2 3 4})
(singleton? [1 2])
(singleton? [1])
(singleton? nil)
(singleton? [1])
(singleton? #{1})
(singleton? [])
(singleton? [2 3 4])
(doc rest)
(doc next)
quit
(first [])
(doc concat)
(doc disj)
(doc remove)
(remove 1 [1 2 3])
(remove #{1} [1 2 3])
(sort [2 1 3])
(vec (sort [2 1 3]))
quit
(doc conj)
(conj 1 [2 3])
(conj [2 3] 1)
(conj '(2 3) 1)
(source map)
(doc conj)
(doc cons)
(source filter)
(seq [1])
(seq [])
quit
(and (seq [1]) (seq [2]))
(and (seq []) (seq [2]))
(cons 1 [1 2])
quit
(use 'recursion :reload)
(my-repeat 5 "lol")
(my-repeat 1 "lol")
(my-repeat 0 "lol")
(my-repeat 10 "lol")
(my-repeat 100 "lol")
(count (my-repeat 100 "lol"))
(my-repeat -1 "lol")
(use 'recursion :reload)
(my-repeat -1 "lol")
(use 'recursion :reload)
(my-range 1)
(my-range 6)
(my-range -1)
(use 'recursion :reload)
(my-range -1)
(my-range 2)
(use 'recursion :reload)
(my-range 2)
(use 'recursion :reload)
(my-range 2)
(use 'recursion :reload)
(tails [1 2])
(tails [1 2 3])
(use 'recursion :reload)
(tails [1 2 3])
(use 'recursion :reload)
(tails [1 2 3])
(doc rest)
(doc next)
(use 'recursion :reload)
(tails [1 2 3])
(seq [])
(seq '())
'()
'(())
(use 'recursion :reload)
(tails [1 2 3])
(use 'recursion :reload)
(inits [1 2 3])
(use 'recursion :reload)
(inits [1 2 3])
(use 'recursion :reload)
(inits [1 2 3])
(map reverse (inits [1 2 3]))
(use 'recursion :reload)
(inits [1 2 3])
(init [1 2 3])
(find-doc init)
(find-doc ini)
(find-doc "init")
(doc disj)
(doc remove)
(remove 1 [1 2 3])
(remove #{1} [1 2 3])
(remove #{1} [1 2 3 1])
(disj 1 [1 2 3 1])
(use 'recursion :reload)
(rotations [1 2 3])
(use 'recursion :reload)
(rotations [1 2 3])
(use 'recursion :reload)
(count-elem 1 [1 2 3 4 5])
(count-elem 1 [1 2 3 4 5 1 1 1 1])
(find-doc zip)
(find-doc "zip")
(zipmap :a [1 2 3])
(zipmap #{:a} [1 2 3])
(zipmap #{:a :b} [1 2 3])
(conj #{1} #{2})
(concat #{1} #{2})
(concat {1} {2})
(concat {:a 1} {2})
(concat {:a 1} {:b 2})
(use 'recursion :reload)
(my-frequencies-helper {} [])
(my-frequencies-helper {} [1 2 3])
(use 'recursion :reload)
(my-frequencies-helper {} [1 2 3])
(use 'recursion :reload)
(my-frequencies-helper {} [1 2 3])
(use 'recursion :reload)
(my-frequencies-helper {} [1 2 3])
(use 'recursion :reload)
(my-frequencies-helper {} [1 2 3])
(my-frequencies-helper {} [1 2 3 1])
(my-frequencies-helper {} [1 2 3 1 1 1])
(use 'recursion :reload)
(my-frequencies-helper {} [1 2 3 1 1 1])
(use 'recursion :reload)
(my-frequencies-helper {} [1 2 3 1 1 1])
(use 'recursion :reload)
(my-frequencies-helper {} [:D :D :D 1 1 2 2])
(sort (my-frequencies-helper {} [:D :D :D 1 1 2 2]))
(sort-map (my-frequencies-helper {} [:D :D :D 1 1 2 2]))
(sorted-map (my-frequencies-helper {} [:D :D :D 1 1 2 2]))
(use 'recursion :reload)
(my-frequencies-helper {} [:D :D :D 1 1 2 2])
(set (my-frequencies-helper {} [:D :D :D 1 1 2 2]))
(find-doc "duplic")
(distinct (my-frequencies-helper {} [:D :D :D 1 1 2 2]))
(hash-map (distinct (my-frequencies-helper {} [:D :D :D 1 1 2 2])))
(map (distinct (my-frequencies-helper {} [:D :D :D 1 1 2 2])))
(distinct (my-frequencies-helper {} [:D :D :D 1 1 2 2]))
(concat (distinct (my-frequencies-helper {} [:D :D :D 1 1 2 2])))
(apply concat (distinct (my-frequencies-helper {} [:D :D :D 1 1 2 2])))
(find-doc "distinct")
(apply hash-map (distinct (my-frequencies-helper {} [:D :D :D 1 1 2 2])))
(apply concat (distinct (my-frequencies-helper {} [:D :D :D 1 1 2 2])))
(union (distinct (my-frequencies-helper {} [:D :D :D 1 1 2 2]))
)
(clojure.set/union (distinct (my-frequencies-helper {} [:D :D :D 1 1 2 2])))
(apply clojure.set/union (distinct (my-frequencies-helper {} [:D :D :D 1 1 2 2])))
(use 'recursion :reload)
(my-frequencies-helper {} [:D :D :D 1 1 2 2])
(disinct [:D :D 1 1 2 2])
(distinct [:D :D 1 1 2 2])
(use 'recursion :reload)
(my-frequencies-helper {} [:D :D :D 1 1 2 2])
(use 'recursion :reload)
(my-frequencies-helper {} [:D :D :D 1 1 2 2])
(find-doc "map")
(use 'recursion :reload)
(my-frequencies-helper {} [:D :D :D 1 1 2 2])
(doc zipmap)
(use 'recursion :reload)
(my-frequencies-helper {} [:D :D :D 1 1 2 2])
(doc repeat)
(repeat 5 3)
(use 'recursion :reload)
(un-frequencies {:a 3 :b 2})
(un-frequencies {:a 3, :b 2})
(key {:a 1})
(first {:a 1})
(seq {:a 1})
(use 'recursion :reload)
(un-frequencies {:a 3 :b 2})
(use 'recursion :reload)
(un-frequencies {:a 3 :b 2})
(use 'recursion :reload)
(un-frequencies {:a 3 :b 2})
(use 'recursion :reload)
(un-frequencies {:a 3 :b 2})
(use 'recursion :reload)
(un-frequencies {:a 3 :b 2})
(concat (un-frequencies {:a 3 :b 2}))
(doc merge)
(assoc '(1 2) '(3 4))
(concat '(1 2) '(3 4))
(use 'recursion :reload)
(concat (un-frequencies {:a 3 :b 2}))
(use 'recursion :reload)
(my-take 3 (range 10))
(use 'recursion :reload)
(my-take 3 (range 10))
(my-take 3 ())
(my-take -1 ())
(my-take -1 [1 2 3])
(use 'recursion :reload)
(my-take -1 [1 2 3])
(use 'recursion :reload)
(my-drop -1 [1 2 3])
(my-drop 2 [1 2 3])
(use 'recursion :reload)
(my-drop 2 [1 2 3])
(my-drop 1 [1 2 3])
(use 'recursion :reload)
(my-drop 1 [1 2 3])
(my-drop 2 [1 2 3])
(my-drop 3 [1 2 3])
(my-drop 4 [1 2 3])
(my-drop -1 [1 2 3])
(use 'recursion :reload)
(halve [1 2 3])
(use 'recursion :reload)
(seq-merge [1 2] [3 4 5])
(doc sort)
(source sort)
(min 1 2)
(min 4 2)
(min [1 2 3])
(apply min [1 2 3])
(apply min [10 2 3])
(use 'recursion :reload)
(remove #{4} [1 2 3 4])
(remove #{4} [1 2 4 5])
(use 'recursion :reload)
(my-sort (range 10 10 -1))
(my-sort [1 2 3 4 5 6])
(use 'recursion :reload)
(my-sort [1 2 3 4 5 6])
(my-sort (reverse [1 2 3 4 5 6]))
(doc remove)
(doc disj)
(doc dissoc)
(drop 3 [1 2 3])
(source sort)
(sorted-seq [2 3 2 1])
(seq [2 3 2 1])
(use 'recursion :reload)
(seq-merge [1 2] [3 4 5])
(seq-merge [1 2] (reverse [3 4 5]))
quit
